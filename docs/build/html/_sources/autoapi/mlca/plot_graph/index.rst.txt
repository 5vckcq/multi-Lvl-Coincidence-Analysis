mlca.plot_graph
===============

.. py:module:: mlca.plot_graph

.. autoapi-nested-parse::

   Contains functions to plot causal-mechanistic models from lists of logical equivalence relations that
   are interpreted as causal and constitution relations. Hypergraphs are created using the TikZ library for
   TeX.

   ..
       !! processed by numpydoc !!


Functions
---------

.. autoapisummary::

   mlca.plot_graph.convert_formula_to_tex_code
   mlca.plot_graph.convert_causal_relation
   mlca.plot_graph.convert_constitution_relation
   mlca.plot_graph.print_structure_in_tikz_plot
   mlca.plot_graph.create_pdf


Module Contents
---------------

.. py:function:: convert_formula_to_tex_code(solution: list) -> str

   
   Converts a full solution for a structure into its corresponding logical formula in tex-syntax.
   solution is expected to be a list of levels, which is a list of formulae, each of which is 2-tuple: first element is the possibly
   complex left-side term of an equivalence formula, the second element is the atomic right-side term
   solution[LEVEL][FORMULA][(LEFT TERM, RIGHT TERM)]

   :param solution: represents a nested list of equivalence formulae
   :type solution: list of lists of tuples of str

   :returns: tex-code for writing solution as a logical formula
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: convert_causal_relation(formula: tuple, level_factor_list_order: list, tex_code: str, color: str, color_map: dict) -> str

   
   Translates a formula of causal relations into TikZ-Latex code
   Returns the code as string.

   :param formula: a tuple expressing an equivalence relation with first element being a DNF, second element
                   being an atomic term
   :type formula: tuple of str
   :param level_factor_list_order: nested list of factors, assumed to contain all factors that appear in formula
   :type level_factor_list_order: list of lists of lists of str
   :param tex_code: string containing the tex-code of the previous elements of the hypergraph,
                    it is relevant to avoid overlaps of nodes
   :type tex_code: str
   :param color: name of the color in which this section of the hypergraph is drawn
   :type color: str
   :param color_map: dictionary whose keys are 'draw' and 'text' for each factor, the values are
                     the names of colors in which the nodes are drawn ('draw') and in which their
                     labels are written ('text')
   :type color_map: dict

   :returns: TikZ-Latex code corresponding to formula
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: convert_constitution_relation(formula: tuple, level_factor_list_order: list, constitution_relation_list: list, color: str) -> str

   
   Converts a formula of constitution relations into TikZ-Latex code.
   Returns the code as string.

   :param formula: a tuple expressing an equivalence relation with first element being a DNF, second element
                   being an atomic term
   :type formula: tuple of str
   :param level_factor_list_order: nested list of factors, assumed to contain all factors that appear in formula
   :type level_factor_list_order: list of lists of lists of str
   :param constitution_relation_list: list of all constitution relations
   :type constitution_relation_list: list of tuples of str
   :param color: name of the color in which this section of the hypergraph is drawn
   :type color: str

   :returns: TikZ-Latex code corresponding to formula
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: print_structure_in_tikz_plot(level_factor_list_order: list, level_equiv_list: list, constitution_relation_list: list, color_map: dict) -> str

   
   Prepares the TikZ code for plotting one solution
   a) places the causal factors as nodes separated by causal order (horizontally) and constitutive level (vertically)
   b) adds the causal and constitution relations as vertices between nodes

   :param level_factor_list_order: nested list of factors, assumed to contain all factors that appear in formula
   :type level_factor_list_order: list of lists of lists of str
   :param level_equiv_list: nested list of causal relations
   :type level_equiv_list: list of lists of tuple of str
   :param constitution_relation_list: list of all constitution relations
   :type constitution_relation_list: list of tuples of str
   :param color_map: dictionary whose keys are 'draw' and 'text' for each factor, the values are
                     the names of colors in which the nodes are drawn ('draw') and in which their
                     labels are written ('text')
   :type color_map: dict

   :returns: TikZ-Latex code corresponding to the model characterized by level_equiv_list and
             constitution_relation_list
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: create_pdf(tex_code_table: list, latex_template_file: str, total_solutions: int) -> None

   
   Creates a pdf from the list tex_code_table.
   The Latex template assumes that tex_code_table is a list of pairs of a number (used to reference the index of the element) and
   a string that contains valid TikZ code.

   :param tex_code_table: list of pairs, first element is index of solution, second is tex-code for hypergraph to this solution
   :type tex_code_table: list of tuples of (int, str)
   :param latex_template_file: path to the template file
   :type latex_template_file: str
   :param total_solutions: number of possible causal-mechanistic models
   :type total_solutions: int















   ..
       !! processed by numpydoc !!

